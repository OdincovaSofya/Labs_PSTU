#include <iostream>

using namespace std;

// Описание структуры
struct point
	{
	int key;
	point* next;
	point* prev;
	};

// Функция для формирования двунаправленного списка
point* make_point( int n)
	{
	point *first, *p;
	first=NULL;
	for (int i=1;i<=n;i++)
		{
		// создаем новый элемент
		p=new(point);
		p->key=i;
		p->prev=first;
		p->next=NULL;
		
		if (p->prev!=NULL)
			{
			p->prev->next=p;
			}
		first=p;
		}
	
	cout << endl; // Перевод строки

	return first;
	}


// Функция возвращает первый элемент в списке, по последнему
point* get_first_el(point*last)
	{
	if (last==NULL) return NULL;
	point *p=last;
	point *first;
	do	{
		if (p->prev==NULL) first=p;
		p=p->prev;
		} while (p!=NULL);
	return first;
	}

// Функция для печати однонаправленного списка, вверх
point* print_point_dec(point*last)
	{
	cout << endl; // Перевод строки
	cout << "Cписок от последнего к первому:" << endl; // Перевод строки
	if (last==NULL) 
		{
		cout << " - список пуст !" << endl; // Перевод строки
		return NULL;
		}
	point *p=last, *first;
	do	{
		cout << p->key << " ";
		if (p->prev==NULL) first=p;
		p=p->prev;
		} while (p!=NULL);
	cout << endl; // Перевод строки
	return first;
	}

// Функция для печати однонаправленного списка, вниз
point* print_point_inc(point*first)
	{
	cout << endl; // Перевод строки
	cout << "Cписок от первого к последнему:" << endl; // Перевод строки
	if (first==NULL) 
		{
		cout << " - список пуст !" << endl; // Перевод строки
		return NULL;
		}
	point *p=first, *last;
	do	{
		cout << p->key << " ";
		if (p->next==NULL) last=p;
		p=p->next;
		} while (p!=NULL);
	cout << endl; // Перевод строки
	return last;
	}

// Добавление элемента в начало списка (возвращает первый)
point* add_first_element(point*first, int add_key)
	{
	if (first==NULL) return NULL;
	
	point *p;
	
	cout << "Добавление элемента (" << add_key << ") в начало списка";
	
	// создаем новый элемент
	p=new(point);
	p->key=add_key;
	p->prev=NULL;
	p->next=first;

	first->prev=p;	
	cout << " - OK" << endl;
	return p;
	}


// Удаление элемента из списка (по указателю на него)
void delete_element(int key, point *fi, point *&first, point *&last)
	{
	cout << " - удаляем элемент (" << key << ")" << endl; // Перевод строки
	
	point *p=first, *p_next=NULL;
	int count=0;

	do	{
		if (p->key==key) 
			{
			p_next=p->next;

			if (p->prev==NULL) 
				{ 
				// Если это первый элемент
				p->next->prev = NULL; 
				first = p->next;
				}
				else if (p->next==NULL) 
					{ 
					// Если это последний элемент
					p->prev->next = NULL; 
					last = p->prev;
					}
					else 
						{ 
						// Если это средний элемент в списке
						p->prev->next=p->next;
						p->next->prev=p->prev;
						}
			// Удаляем
			delete p;
			p=p_next;
			count++;
			}
		else 
			{
			p=p->next;
			}
		} while (p!=NULL);
	
	if (count==0)
		{
		cout << " - элемент для удаления не найден !" << endl; // Перевод строки
		} 
	else
		{
		cout << " - удалено записей - " << count << endl; // Перевод строки
		}
	}

// Удаляем все элементы
point* delete_all_element (point *&first, point *&last)
	{
	cout << endl; // Перевод строки
	cout << "Удаление списка целиком:" << endl; // Перевод строки
	
	if (first==NULL) 
		{
		cout << " - список пуст !" << endl; // Перевод строки
		return NULL;
		}

	point *p=first, *temp;
	
	do	{
		cout << p->key << " - удален" << endl;
		temp=p->next;
		delete p; // Удаляем элемент
		p=temp;
		} while (p!=NULL);
	
	first=NULL;
	last=NULL;
	}

// Запись списка в файл
point* save_to_file (point *first)
	{
	cout << endl; // Перевод строки
	cout << "Запись списка в файл";
	
	if (first==NULL) 
		{
		cout << " - список пуст !" << endl; // Перевод строки
		return NULL;
		}
	
	FILE *fp;	// указатель связанный с файлом
	point *p=first;

	//открываем файл
	if ((fp=fopen("f.dat", "wb"))==NULL) 
		{
		cout << "Ошибка открытия файла." << endl; // Перевод строки
		// если при открытии файла возникает ошибка, то выходим из функции
		exit(1);
		}


	do	{
		// записываем в файл
		fwrite(&p->key, sizeof(int),1,fp);
		if (ferror(fp)!=NULL) exit(2);
		p=p->next;
		} while (p!=NULL);

	fclose(fp);
	
	cout << " - OK" << endl;
	}

// Функция для формирования двунаправленного списка из файла
point* make_point_from_file()
	{
	cout << endl; // Перевод строки
	cout << "Формируем двунаправленный список из файла:" << endl; // Перевод строки

	FILE *fp;	// указатель связанный с файлом
	int i=0, key;
	point *first, *p;
	first=NULL;

	// если при открытии файла возникает ошибка, то выходим из функции
	if ((fp=fopen("f.dat", "rb"))==NULL) 
		{
		cout << "Ошибка открытия файла." << endl; // Перевод строки
		// если при открытии файла возникает ошибка, то выходим из функции
		exit(3);
		}

	
	do	{
		fread(&key, sizeof(int),1,fp);

		if (feof(fp)==0)
			{
			// создаем новый элемент
			p=new(point);
			p->key=key;
			p->prev=first;
			p->next=NULL;
		
			if (p->prev!=NULL)
				{
				p->prev->next=p;
				}
			first=p;

			i++;
			}
		} while(!feof(fp));
	
	cout << " - Cчитано " << i << " записей ";
	fclose(fp);
	
	cout << endl; // Перевод строки

	return first;
	}


// -------------------------------------------------------------
// Основаная программа
// -------------------------------------------------------------
int main()
	{
	setlocale(LC_ALL,"Russian");
	
	int k;
	
	cout << "Лабораторная работа № 11.";   
	cout << endl; // Перевод строки
	cout << "Информационно динамические структуры";
	cout << endl; // Перевод строки
	cout << endl; // Перевод строки
	cout << "Вариант 6" << endl;
	cout << "Записи в линейном списке содержат ключевое поле типа int. Сформировать двунаправленный список. Удалить из него элемент с заданным номером, добавить элемент в начало списка";
	
	point *last, *first;

	last = make_point(10); // Создаем список из 10 элементов
	first = get_first_el(last);
	print_point_inc(first);

	cout << endl; // Перевод строки
	cout << "Введите элемент для добавления в начало списка key=";
	cin >> k;

	first = add_first_element(first, k);
	print_point_inc(first);

	cout << endl; // Перевод строки
	cout << "Введите элемент для удаления key=";
	cin >> k;

	delete_element(k, first, first, last);
	print_point_inc(first);

	// Запись списка в файл
	save_to_file(first);


	delete_all_element(first, last);
	print_point_inc(first);


	last = make_point_from_file();
	first = get_first_el(last);
	print_point_inc(first);

	cout << endl; // Перевод строки
	system("pause"); // MS Visual Studio

	return 0; 
	}