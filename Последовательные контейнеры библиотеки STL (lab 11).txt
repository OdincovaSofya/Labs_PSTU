Лабораторная работа № 11
"Последовательные контейнеры библиотеки STL”
Задание:

Задача 1
1. Контейнер – вектор;
2. Типы элементов – double;
Задача 2

Типы элементов Time (см. лабораторную работу №3)
Задача 3

Параметризированный класс – Вектор
Найти максимальный элемент и добавить его в начало контейнера
Задача 4

Адаптер контейнера – стек
Найти минимальный элемент и удалить его из контейнера
Задача 5

Параметризированный вектор
Адаптер контейнера – стек
К каждому элементу добавить среднее арифметическое контейнера

#include <iostream>
#include "Vector.h"
#include "Timer.h"
#include "Stack.h"
#include <string>

using namespace std;

int Max(const Vector<int>& vec);
double Max(const Vector<double>& vec);
float Max(const Vector<float>& vec);

int Min(const Vector<int>& vec);
double Min(const Vector<double>& vec);
float Min(const Vector<float>& vec);

int Min(const Stack<int>& stack);
double Min(const Stack<double>& stack);
float Min(const Stack<float>& stack);

double Average(const Vector<int> vec);
double Average(const Vector<double> vec);
double Average(const Vector<float> vec);

template<class T>
void PrintStack(const Stack<T>& stack);

int main()
{
	Vector<double> doubleVector(10);
	for (int i = 0; i < 10; i++)
	{
		double val = rand();
		doubleVector.PushBack(rand());
	}

	double maxValue = Max(doubleVector);
	cout << "MAX is " << maxValue << endl;
	doubleVector.PushBack(maxValue);

	double minValue = Min(doubleVector);
	cout << "MIN is " << minValue << endl;
	doubleVector.Remove(minValue);
	cout << doubleVector;

	double average = Average(doubleVector);
	cout << "Average is " << average << endl;
	doubleVector + average;
	cout << doubleVector;

	Vector<Timer> timerVector(10);
	for (int i = 0; i < timerVector.GetLength(); i++)
		timerVector.PushBack(Timer(1, 1));

	Stack<double> stack(5);
	for (int i = 0; i < 5; i++)
		stack.push(rand());

	double minStackValue = Min(stack);
	cout << "min stack " << minStackValue << endl;
	PrintStack(stack);
	cout << "try remove.." << endl;
	stack.Remove(minStackValue);
	PrintStack(stack);

	Vector<double> vec = stack;
	cout << "print stack.." << endl;
	PrintStack(stack);
	cout << "print vec.." << endl;
	cout << vec;
}

template<class T>
void PrintStack(const Stack<T>& stack)
{
	Stack<T> secondStack = stack;
	int size = secondStack.size();
	for (int i = 0; i < size; i++)
	{
		cout << secondStack.pop() << endl;
	}
}
double Average(const Vector<int> vec) {
	long sum = 0;
	long count = 0;

	for (int i = 0; i < vec.size; i++)
	{
		sum += vec[i];
		count++;
	}

	if (count > 0) return double(sum / count);

	throw runtime_error("No elements");
}
double Average(const Vector<double> vec) {
	long sum = 0;
	long count = 0;

	for (int i = 0; i < vec.size; i++)
	{
		sum += vec[i];
		count++;
	}

	if (count > 0) return double(sum / count);

	throw runtime_error("No elements");
}
double Average(const Vector<float> vec) {
	double sum = 0;
	long count = 0;

	for (int i = 0; i < vec.size; i++)
	{
		sum += vec[i];
		count++;
	}

	if (count > 0) return double(sum / count);

	throw runtime_error("No elements");
}

int Max(const Vector<int>& vec) {
	int value = 0;
	bool hasValue = false;

	for (int i = 0; i < vec.size; i++)
	{
		if (hasValue) {
			if (vec[i] > value) value = vec[i];
		}
		else {
			value = vec[i];
			hasValue = true;
		}
	}

	if (hasValue)
		return value;

	throw runtime_error("No elements");
}
double Max(const Vector<double>& vec) {
	double value = 0;
	bool hasValue = false;

	for (int i = 0; i < vec.size; i++)
	{
		if (hasValue) {
			if (vec[i] > value) value = vec[i];
		}
		else {
			value = vec[i];
			hasValue = true;
		}
	}

	if (hasValue)
		return value;

	throw runtime_error("No elements");
}
float Max(const Vector<float>& vec) {
	float value = 0;
	bool hasValue = false;

	for (int i = 0; i < vec.size; i++)
	{
		if (hasValue) {
			if (vec[i] > value) value = vec[i];
		}
		else {
			value = vec[i];
			hasValue = true;
		}
	}

	if (hasValue)
		return value;

	throw runtime_error("No elements");
}
int Min(const Vector<int>& vec) {
	int value = 0;
	bool hasValue = false;

	for (int i = 0; i < vec.size; i++)
	{
		if (hasValue) {
			if (vec[i] < value) value = vec[i];
		}
		else {
			value = vec[i];
			hasValue = true;
		}
	}

	if (hasValue)
		return value;

	throw runtime_error("No elements");
}
double Min(const Vector<double>& vec) {
	double value = 0;
	bool hasValue = false;

	for (int i = 0; i < vec.size; i++)
	{
		if (hasValue) {
			if (vec[i] < value) value = vec[i];
		}
		else {
			value = vec[i];
			hasValue = true;
		}
	}

	if (hasValue)
		return value;

	throw runtime_error("No elements");
}
float Min(const Vector<float>& vec) {
	float value = 0;
	bool hasValue = false;

	for (int i = 0; i < vec.size; i++)
	{
		if (hasValue) {
			if (vec[i] < value) value = vec[i];
		}
		else {
			value = vec[i];
			hasValue = true;
		}
	}

	if (hasValue)
		return value;

	throw runtime_error("No elements");
}
int Min(const Stack<int>& stack) {
	int value = 0;
	bool hasValue = false;
	Stack<int> secondStack = stack;

	for (int i = 0; i < stack.size(); i++)
	{
		int stackValue = secondStack.pop();
		if (hasValue) {
			if (stackValue < value) value = stackValue;
		}
		else {
			value = stackValue;
			hasValue = true;
		}
	}

	if (hasValue)
		return value;

	throw runtime_error("No elements");
}
double Min(const Stack<double>& stack) {
	double value = 0;
	bool hasValue = false;
	Stack<double> secondStack = stack;

	for (int i = 0; i < stack.size(); i++)
	{
		double stackValue = secondStack.pop();
		if (hasValue) {
			if (stackValue < value) value = stackValue;
		}
		else {
			value = stackValue;
			hasValue = true;
		}
	}

	if (hasValue)
		return value;

	throw runtime_error("No elements");
}
float Min(const Stack<float>& stack) {
	float value = 0;
	bool hasValue = false;
	Stack<float> secondStack = stack;

	for (int i = 0; i < stack.size(); i++)
	{
		float stackValue = secondStack.pop();
		if (hasValue) {
			if (stackValue < value) value = stackValue;
		}
		else {
			value = stackValue;
			hasValue = true;
		}
	}

	if (hasValue)
		return value;

	throw runtime_error("No elements");
}
Stack.h
#pragma once

#include "Vector.h"

using namespace std;

template<class T>
class Vector;

template<class T>
class Stack;

template<class T>
class Stack :
	protected Vector<T>
{
public:
	Stack(int capacity) : Vector<T>(capacity) {

	}

	Stack(const Stack<T>& s) : Vector<T>(s) {
		
	}

	void push(const T& value)
	{
		Vector<T>::PushBack(value);
	}

	T& pop()
	{
		T& val = Vector<T>::Back();
		Vector<T>::PopBack();

		return val;
	}

	T& top() const
	{
		return Vector<T>::Back();
	}

	void Clear() {
		Vector<T>::Clear();
	}

	int size() const {
		return Vector<T>::GetLength();
	}

	int capacity() const {
		return Vector<T>::capacity;
	}

	void Remove(T value)
	{
		Vector<T>::Remove(value);
	}
};
Vector.h
#pragma once

#include <iostream>
#include <algorithm>
#include <string>
#include "Stack.h"

using namespace std;

const int MaxSize = 10000;

template<class T>
class Vector
{
public:
	int size = 0;
	int capacity = 0;
	const int defaultCapacity = 4;

	Vector() 
	{

	}

	Vector(int size, T value)
	{
		if (size > MaxSize)
		{
			string str = "Exception: max size is " + to_string(MaxSize);

			throw str;
		}

		EnsureCapacity(size);

		for (int i = 0; i < size; i++)
		{
			PushBack(value);
		}
	}

	Vector(const Vector<T>& v)
	{
		EnsureCapacity(v.capacity);

		for (int i = 0; i < v.size; i++)
		{
			PushBack(v[i]);
		}
	}

	Vector(Stack<T>& s)
	{
		EnsureCapacity(s.capacity());

		int size = s.size();
		for (int i = 0; i < size; i++)
		{
			PushBack(s.pop());
		}
	}

	Vector(int capacity)
	{
		if (capacity > MaxSize)
		{
			throw runtime_error("Exception: max size is " + to_string(MaxSize));
		}

		EnsureCapacity(capacity);
	}

	~Vector()
	{
		Clear();

		if(arr != NULL)
		free(arr);
	}

	Vector& operator=(const Vector& v)
	{
		if (this == &v) return *this;

		Clear();

		EnsureCapacity(v.size);

		for (int i = 0; i < v.size; i++)
		{
			PushBack(v.arr[i]);
		}

		return *this;
	}

	Vector& operator+(const int value)
	{
		if (size == 0) return *this;

		for (int i = 0; i < size; ++i)
		{
			arr[i] += value;
		}

		return *this;
	}
	Vector& operator+(const double value)
	{
		if (size == 0) return *this;

		for (int i = 0; i < size; ++i)
		{
			arr[i] += value;
		}

		return *this;
	}

	Vector& operator-(const int value)
	{
		if (size == 0 || value > size) return *this;

		for (int i = 0; i < value; i++)
		{
			PopBack();
		}

		return *this;
	}

	bool PushBack(const T& value)
	{
		if (size == capacity)
		{
			EnsureCapacity(max(size * 2, size+1));
		}

		new (&arr[size++]) T(value);

		return true;
	}

	void RemoveAt(int position)
	{
		if (position >= size)
			return;

		for (int i = position; i < size-1; i++)
		{
			arr[i].~T();
			new(&arr[i]) T(move(arr[i + 1]));
		}

		size--;
		arr[size].~T();
	}

	void Remove(T value)
	{
		if (size == 0)
			return;

		for (int i = 0; i < size - 1; i++)
		{
			if (arr[i] == value)
			{
				RemoveAt(i);
				break;
			}
		}
	}

	T& Back() const
	{
		return arr[size - 1];
	}

	T& Front() const
	{
		return arr[0];
	}

	void PopBack() {
		if (size == 0)
			return;

		arr[size - 1].~T();

		size--;
	}

	int GetLength() const
	{
		return size;
	}

	int GetCapacity() const {
		return capacity;
	}

	void Clear() {
		if (size == 0)
			return;

		for (int i = 0; i < size; i++)
		{
			arr[i].~T();
		}

		size = 0;
	}

	T& operator[](int index) const
	{
		if(index < 0)
			throw runtime_error("Index must be equal to or greater than 0");

		if(index >= size)
			throw runtime_error("Index out of bounds");

		return arr[index];
	}

	int operator()()
	{
		return size;
	}


	template<class T> friend ostream& operator<< (ostream& out, const Vector<T>& v);
	template<class T> friend istream& operator>> (istream& in, Vector<T>& v);

private:
	T* arr = nullptr;

protected:
	void EnsureCapacity(int newCapacity) {
		if (newCapacity <= capacity)
			return;

		T* newArr = static_cast<T*>(malloc(sizeof(T) * newCapacity)); //просто выделяем память, без вызовов конструкторов

		for (int i = 0; i < size; i++)
		{
			new(&newArr[i]) T(move(arr[i])); //вызываеем конструктор для нового объекта и перемещаем на него старый
		}

		if (arr != NULL)
			free(arr);

		arr = newArr;

		capacity = newCapacity;
	}
};

template<class T>
ostream& operator<<(ostream& out, const Vector<T>& v)
{
	if (v.size == 0)
	{
		cout << "Array is empty";
		return out;
	}

	for (int i = 0; i < v.size; i++)
	{
		cout << v.arr[i] << endl;
	}

	return out;
}

template<class T>
istream& operator>>(istream& in, Vector<T>& v)
{
	for (int i = 0; i < v.size; i++)
	{
		cout << "Elem " << i << ": "; in >> v.arr[i];
	}

	return in;
}
Timer.cpp
#include "Timer.h"
#include <string>
#include <iostream>


	using namespace std;

	Timer::Timer()
	{
		min = 0;
		sec = 0;
	}
	Timer::Timer(int min, int sec)
	{
		this->min = min;
		this->sec = sec;
	}

	Timer::Timer(const Timer&f)
	{
		min = f.min;
		sec = f.sec;
	}

	Timer::~Timer()
	{
	}
	void Timer::setMin(int min)
	{
		this->min = min;
	}
	void Timer::setSec(int sec)
	{
		this->sec = sec;
	}
	void Timer::Show()
	{
		printf("%d:%d\n", min, sec);
	}
	Timer Timer::operator+(const Timer &other)
	{
		int temp1 = min * 60 + sec;
		int temp2 = other.min * 60 + other.sec;

		Timer t((temp1 + temp2) / 60, (temp1 + temp2) & 60);

		return t;
	}
	void Timer::operator+(const int seconds)
	{
		int temp = sec + seconds;

		min = min + (temp / 60);
		sec = temp & 60;
	}
	bool Timer::operator==(const Timer& other)
	{
		int temp1 = min * 60 + sec;
		int temp2 = other.min * 60 + other.sec;

		if (temp1 != temp2)
			return false;

		return true;
	}
	Timer& Timer::operator=(const Timer& other)
	{
		min = other.min;
		sec = other.sec;

		return *this;
	}
	ostream& operator<<(ostream& out, const Timer& timer)
	{
		out << "Time " << timer.min << ":" << timer.sec;

		return out;
	}
	istream& operator>>(istream& in, Timer& timer)
	{
		string textFromFile;
		getline(in, textFromFile);
		int spacePos = textFromFile.find(' ');
		int min = 0;
		int sec = 0;
		if (spacePos != string::npos)
		{
			int delimiter = textFromFile.find(':');
			if (delimiter != string::npos)
			{
				min = stoi(textFromFile.substr(spacePos, delimiter));
				sec = stoi(textFromFile.substr(delimiter + 1));
			}
		}

		timer.min = min;
		timer.sec = sec;

		return in;
	}


Timer.h
#pragma once

#include <string>


	using namespace std;

	class Timer
	{
	private:
		int min;
		int sec;
	public:
		Timer();
		Timer(int min, int sec);
		Timer(const Timer& f);
		~Timer();

		void setMin(int min);
		void setSec(int sec);

		int GetMin() {
			return min;
		}

		int GetSec() {
			return sec;
		}

		void Show();

		Timer operator+(const Timer& other);
		void operator+(const int seconds);
		bool operator==(const Timer& other);
		Timer& operator=(const Timer& other);
		friend ostream& operator<< (ostream& out, const Timer& timer);
		friend istream& operator>> (istream& in, Timer& timer);
	};
