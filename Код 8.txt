#include "pch.h"
#include <iostream>
#include <string>
#include <cstdio>
#include <cstdlib>
#include <ctime>
using namespace std;

struct Abiturient     //Создаем структуру
{
	char fio [40];       //здесь будет храниться Ф.И.О абитуриента
	int year;        //год рождения
	int scores[3];   //окенки вступительных экзаменов
	float gpa;       //средний балл аттестата
};
const int NotUsed = system("color F0");
void createAbit(FILE* file, const char *p_file_name, int size); //функция заполнения файл данными типа структура
void delAbit(FILE * file, FILE * file_bufer, const char *p_file_name, int size); //Функция выводит содержимое файла на экран
void readAndPrintFile(FILE* file, const char *p_file_name); //Функция выводит содержимое файла на экран
void addAbit(FILE* file, FILE * file_bufer, const char *p_file_name);
int main()
{
	FILE* p_file = NULL;// указатель связанный с файлом
	FILE* p_file_bufer = NULL;
	setlocale(LC_ALL, ""); // Позволяет выводить русский текст
	srand(time(0));
	const char* p_file_name = "file.dat";
	int size = 5; //количество записей в файле
	createAbit(p_file, p_file_name, size); 
	delAbit(p_file, p_file_bufer, p_file_name, size);
	addAbit(p_file, p_file_bufer, p_file_name);

}

void createAbit(FILE * file, const char *p_file_name, int size) //функция заполненяет файл объектами структуры Абитуриент
{
	Abiturient Abit;
	string sourse_data_fio[10] =
	{
	"Ivanova Elena Dmitrievna",
	"Bulytnov Sergey Igorevich",
	"Dobrinin Oleg Petrovich",
	"Mutovin Pavel Sergeevich",
	"Borodavin Evgeniy Vasilievich",
	"Epishin Nikita Petrovich",
	"Vereshagina Anna Vladimirovna",
	"Bukin Gennadiy Petrovich",
	"Karmanova Daria Olegovna",
	"Vasilkov Nikita Andreevich"
	};
	file = fopen(p_file_name, "wb"); //открываем файл для записи
	if (file == NULL)
	{
		system("cls");
		perror("Ошибка при открытии файла"); // выводит строку записанную () : код ошибки
		exit(1);
	}
	for (int i = 0; i < size; i++)
	{
		strcpy(Abit.fio, sourse_data_fio[i].c_str());
		Abit.year = 1980 + rand() % 23; // Генерируем год рождения 1980-2002
		for (int c = 0; c < 3; c++)
		{
			Abit.scores[c] = 3 + rand() % 3;// Генерируем оценки вступительных экзаменов
		}
		Abit.gpa = 3 + (float)(rand() % 2) + 1 / (float)(1 + rand() % 10); // Генерируем средний бал аттестата	
		fwrite(&Abit, sizeof(Abiturient), 1, file); //записываем структуру в файл
	}
	fclose(file);
	readAndPrintFile(file, p_file_name); //считываем и выводим на экран содержимое файла
}

void delAbit(FILE * file, FILE * file_bufer, const char *p_file_name, int size)
{
	int number,c=0;
	const char* p_buf_file_name = "file1.dat";
	Abiturient Buf;
	cout << "Введите номер абитуриента, которгого хотите удалить - ";	cin >> number; 	cout << endl;
	while (number<0 || number>=size)
	{
		cout << "Абитуриента с данным номером не существует, повторите ввод - ";
		cin >> number;
		cout << endl;
	}
	file = fopen(p_file_name, "rb"); //открываем файл для чтения
	if (file == NULL)
	{
		system("cls");
		perror("Ошибка при открытии файла");
		exit(1);
	}
	file_bufer = fopen(p_buf_file_name, "wb"); //открываем файл для записи
	if (file_bufer == NULL)
	{
		system("cls");
		perror("Ошибка при открытии файла"); // выводит строку записанную () : код ошибки
		exit(1);
	}
	while (fread(&Buf, sizeof(Abiturient), 1, file) == 1)
	{
		if (c != number)
		{
			fwrite(&Buf, sizeof(Abiturient), 1, file_bufer);
		}
		c++;
	}
	
	fclose(file);
	fclose(file_bufer);
	readAndPrintFile(file_bufer, p_buf_file_name); //считываем и выводим файл
	remove(p_file_name); //удаляем исходный файл
	rename(p_buf_file_name, p_file_name); //присваиваем файлу буфера имя исходного файла
}

void readAndPrintFile(FILE * file, const char * p_file_name) //Функция cчитывает из файла и выводит на экран один элемент структуры Абитуриент
{
	Abiturient Buf;
	int number = 0;
	cout.precision(3);
	file = fopen(p_file_name, "rb"); //открываем файл для чтения
	if (file == NULL)
	{
		perror("Ошибка при открытии файла");
		exit(1);
	}
	cout << "Список абитуриентов:" << endl << endl;
	while (fread(&Buf, sizeof(Abiturient), 1, file) == 1)
	{
		cout << "Абитуриент номер " << number << endl;
		cout << "Ф.И.О. - " << Buf.fio << endl;
		cout << "Год рождения - " << Buf.year << endl;
		cout << "Оценки вступительных экзаменов: \n	Русский язык - " << Buf.scores[0] << endl;
		cout << "	Математика - " << Buf.scores[1] << endl;
		cout << "	Физика - " << Buf.scores[2] << endl;
		cout << "Средний бал аттестата - " << Buf.gpa << endl << endl;
		number++;
	}
	fclose(file);
	cout << "=============================================================\n\n";
}

void addAbit(FILE* file, FILE * file_bufer, const char * p_file_name)
{
	string surname;
	Abiturient Buf;
	int size_name;
	bool flag = false;
	const char* p_buf_file_name = "file1.dat";
	cout << "Введите фамилию после которой нужно добавить элемент: ";
	cin >> surname;
	surname += " ";
	size_name = surname.length();
	file = fopen(p_file_name, "rb"); //открываем файл для чтения
	if (file == NULL)
	{
		system("cls");
		perror("Ошибка при открытии файла");
		exit(1);
	}
	file_bufer = fopen(p_buf_file_name, "wb"); //открываем файл для чтения
	if (file_bufer == NULL)
	{
		system("cls");
		perror("Ошибка при открытии файла");
		exit(1);
	}
	while (fread(&Buf, sizeof(Abiturient), 1, file) == 1)
	{
		fwrite(&Buf, sizeof(Abiturient), 1, file_bufer);
		for (int i = 0; i < size_name; i++)
		{
			if (Buf.fio[i] == surname[i])
			{
				flag = true;
			}
			else
			{
				flag = false;
				break;
			}
		}
		if (flag == true)
		{
			cout << "\nФамилия найдена. Введите новый элемент:" << endl;
			cout << "Ф.И.О. - "; 	cin.ignore().getline(Buf.fio, 40);
			cout << "Год рождения - "; cin >> Buf.year;
			cout << "Оценки вступительных экзаменов: \n\tРусский язык - "; cin >> Buf.scores[0];
			cout << "\tМатематика - "; cin >> Buf.scores[1];
			cout << "\tФизика - "; cin >> Buf.scores[2];
			cout << "Средний бал аттестата - "; cin >> Buf.gpa;
			cout << "\n=============================================================\n\n";
			fwrite(&Buf, sizeof(Abiturient), 1, file_bufer);
		}
	}
	fclose(file); 
	fclose(file_bufer);
	readAndPrintFile(file_bufer, p_buf_file_name); //считываем и выводим файл
	remove(p_file_name); //удаляем исходный файл
	rename(p_buf_file_name, p_file_name); //присваиваем файлу буфера имя исходного файла
}