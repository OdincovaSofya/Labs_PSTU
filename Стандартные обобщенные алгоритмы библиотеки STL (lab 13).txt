Лабораторная работа № 13
"Стандартные обобщенные алгоритмы библиотеки STL”
Задание:

Задача 1
1. Контейнер –вектор;
2. Тип элементов – Timer

Задача 2
Адаптер контейнера - стек

Задача 3
Ассоциативный контейнер – множество
Заменить максимальный элемент на заданное значение

Задача 4
Найти минимальный элемент и удалить его из контейнера

Задача 5
К каждому элементу добавить среднее арифметическое контейнера

#include <iostream>
#include "Timer.h"
#include <algorithm>
#include <vector>
#include <stack>
#include <set>

using namespace std;

template<class T>
void PrintVector(vector<T>& vec);
template<class T>
T Average(vector<T>& vec);
template<class T>
void PrintSet(set<T>& set);
int AverageSet(set<int>& set);
void AddValueToSet(set<int>& s, int& value);

int main()
{
	vector<Timer> vector;
	for (int i = 0; i < 10; i++)
	{
		vector.push_back(Timer(i * 2, i));
	}

	PrintVector(vector);
	Timer maxTimer = *max_element(vector.begin(), vector.end());
	cout << "max --> " << maxTimer << endl;
	Timer t(99, 99);
	replace(vector.begin(), vector.end(), maxTimer, t);
	PrintVector(vector);

	Timer minTimer = *min_element(vector.begin(), vector.end());
	cout << "min --> " << minTimer << endl;
	remove(vector.begin(), vector.end(), minTimer);
	PrintVector(vector);

	Timer averageTimer = Average(vector);
	cout << "Average --> " << averageTimer << endl;
	for_each(vector.begin(), vector.end(), [averageTimer=&averageTimer](Timer& t) {t = t + *averageTimer; });
	PrintVector(vector);

	set<int> s;
	s.emplace(80);
	for (int i = 0; i < 10; i++)
	{
		s.emplace(i);
	}
	s.emplace(150);
	PrintSet(s);
	int maxSetElement = *s.rbegin();
	cout << "Max set element: " << maxSetElement << endl;
	int newVal = 999;
	s.erase(maxSetElement);
	s.emplace(newVal);
	PrintSet(s);
	int minSetElement = *s.begin();
	cout << "Min set element: " << minSetElement << endl;
	s.erase(minSetElement);
	PrintSet(s);
	int averageSet = AverageSet(s);
	cout << "average set " << averageSet << endl;
	AddValueToSet(s, averageSet);

	PrintSet(s);
}

void AddValueToSet(set<int>& s, int &value)
{

	set<int> set2;
	for (auto elem : s)
	{
		set2.emplace(elem + value);
	}
	s = set2;
}
template<class T>
void PrintVector(vector<T>& vec) {
	for (int i = 0; i < vec.size(); i++)
	{
		cout << vec[i] << endl;
	}
}
template<class T>
void PrintSet(set<T>& set) {
	for (auto elem : set)
	{
		cout << elem << endl;
	}
}

template<class T>
T Average(vector<T>& vec) 
{
	T aver;
	for (int i = 0; i < vec.size(); i++)
	{
		aver = aver + vec[i];
	}

	aver / vec.size();

	return aver;
}
int AverageSet(set<int>& set)
{
	int aver = 0;
	for (auto elem : set)
	{
		aver += elem;
	}

	aver = aver / set.size();

	return aver;
}
Timer.h
#pragma once

#include <string>


	using namespace std;

	class Timer
	{
	private:
		int min;
		int sec;
	public:
		Timer();
		Timer(int min, int sec);
		Timer(const Timer& f);
		~Timer();

		void setMin(int min);
		void setSec(int sec);

		int GetMin() {
			return min;
		}

		int GetSec() {
			return sec;
		}

		void Show();

		Timer operator+(const Timer& other);
		void operator+(const int seconds);
		bool operator==(const Timer& other);
		bool operator > (const Timer& other) const;
		bool operator < (const Timer& other) const;
		Timer& operator=(const Timer& other);
		friend ostream& operator<< (ostream& out, const Timer& timer);
		friend istream& operator>> (istream& in, Timer& timer);
	};

Timer.cpp
#include "Timer.h"
#include <string>
#include <iostream>


	using namespace std;

	Timer::Timer()
	{
		min = 0;
		sec = 0;
	}
	Timer::Timer(int min, int sec)
	{
		this->min = min;
		this->sec = sec;
	}

	Timer::Timer(const Timer&f)
	{
		min = f.min;
		sec = f.sec;
	}

	Timer::~Timer()
	{
	}
	void Timer::setMin(int min)
	{
		this->min = min;
	}
	void Timer::setSec(int sec)
	{
		this->sec = sec;
	}
	void Timer::Show()
	{
		printf("%d:%d\n", min, sec);
	}
	Timer Timer::operator+(const Timer &other)
	{
		int temp1 = min * 60 + sec;
		int temp2 = other.min * 60 + other.sec;

		Timer t((temp1 + temp2) / 60, (temp1 + temp2) & 60);

		return t;
	}
	void Timer::operator+(const int seconds)
	{
		int temp = sec + seconds;

		min = min + (temp / 60);
		sec = temp & 60;
	}
	bool Timer::operator==(const Timer& other)
	{
		int temp1 = min * 60 + sec;
		int temp2 = other.min * 60 + other.sec;

		if (temp1 != temp2)
			return false;

		return true;
	}
	Timer& Timer::operator=(const Timer& other)
	{
		min = other.min;
		sec = other.sec;

		return *this;
	}
	ostream& operator<<(ostream& out, const Timer& timer)
	{
		out << "Time " << timer.min << ":" << timer.sec;

		return out;
	}
	istream& operator>>(istream& in, Timer& timer)
	{
		string textFromFile;
		getline(in, textFromFile);
		int spacePos = textFromFile.find(' ');
		int min = 0;
		int sec = 0;
		if (spacePos != string::npos)
		{
			int delimiter = textFromFile.find(':');
			if (delimiter != string::npos)
			{
				min = stoi(textFromFile.substr(spacePos, delimiter));
				sec = stoi(textFromFile.substr(delimiter + 1));
			}
		}

		timer.min = min;
		timer.sec = sec;

		return in;
	}
	